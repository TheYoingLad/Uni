module gy03 where

open import Lib hiding (_+_; _*_; _-_; _^_; _!; pred; pred'; _>_; _<_; min; max)
open import Lib.Containers.List hiding (length; _++_; map; iteList)

-- Œ∑ = \eta = \Gh

--------------------------------------------------------
-- Œ≤, Œ∑ szab√°lyok egyszer≈±en megfogalmazva
--------------------------------------------------------
{-
A Œ≤-szab√°lyok l√©nyeg√©ben azt hat√°rozz√°k meg, hogy hogy kell sz√°molni az √©rt√©keimmel; teh√°t hogy mit kell csin√°lni, ha egy konstruktorra alkalmazok egy destruktort.
Pl. f√ºggv√©nyek eset√©n (Œª n ‚Üí n + 2) 3, ebben a kifejez√©sben a Œª a konstruktor, a f√ºggv√©nyalkalmaz√°s a destruktor; ekkor csak be kell helyettes√≠teni az √©rt√©ket a megfelel≈ë hely√©re,
majd ki kell sz√°molni az √©rt√©k√©t.

Az Œ∑-szab√°lyok azt hat√°rozz√°k meg, hogy mit kell tenni ha egy destruktorra alkalmazok egy konstruktort.
Pl. f√ºggv√©nyek eset√©n (Œª x ‚Üí (1 +_) x), ebben a lambda alatt tal√°lhat√≥ egy f√ºggv√©nyalkalmaz√°s, amir≈ël az el≈ëbb volt sz√≥, hogy az egy destruktor; a Œª a konstruktor,
ekkor tudjuk specifikusan f√ºggv√©nyek eset√©ben, hogy a Œª elhagyhat√≥ az √°tadott x-szel egy√ºtt (Œª x ‚Üí (1 +_) x) ‚â° (1 +_)
-}

--------------------------------------------------------
-- t√≠pusok Œ≤ szab√°lyai
--------------------------------------------------------
{-
Minden t√≠pusnak megadhat√≥ a Œ≤ szab√°lya a t√≠pus alapj√°n.

Œ≤-szab√°lyok azt mondj√°k meg, hogy egy t√≠pus egy adott √©rt√©k√©vel mit kell csin√°lni, hogy megk√ºl√∂nb√∂ztess√ºk a t√≠pus t√∂bbi √©rt√©k√©t≈ël.

Egyszer≈±bb ezt az √∂tletet tal√°n Bool-on szeml√©ltetni:

data Bool : Set where
  false true : Bool

Hogyan lehet megk√ºl√∂nb√∂ztetni a false-ot a true-t√≥l?
Kell egy f√ºggv√©ny (destruktor), amely k√ºl√∂nb√∂z≈ë Bool √©rt√©kekre k√ºl√∂nb√∂z≈ë eredm√©nyt ad szintaxis szerint, √©s CSAK √©s PONTOSAN a Bool √©rt√©keit kezeli,
teh√°t mivel a Bool-nak k√©t √©rt√©ke van, ez√©rt a destruktornak PONTOSAN k√©t elemet kell kezelnie, nem t√∂bbet, nem kevesebbet.

Melyik ez a f√ºggv√©ny a Bool-ok felett, ami false-ra, illetve true-ra egy√©rtelm≈±en k√©t k√ºl√∂nb√∂z≈ë dolgot ad eredm√©ny√ºl? (Ak√°r haskell-b≈ël, ak√°r m√°s oop nyelvekb≈ël ismert konstrukci√≥.)
Mi a destruktora?
V√°lasz:

H√°ny Œ≤-szab√°lyra van sz√ºks√©g a Bool eset√©n?
V√°lasz:

Mik lesznek ezek a Œ≤-szab√°lyok?
V√°lasz:
---------------------------------------------------------
Ha √≠runk egy 3 elem≈± t√≠pust (l√©nyeg√©ben csak egy enumot):

data ùüõ : Set where
  a1 a2 a3 : ùüõ

Mi lesz a ùüõ t√≠pus destruktora?
V√°lasz:

Akkor ennek a t√≠pusnak mik lesznek a Œ≤-szab√°lyai?
V√°lasz:
----
4 elemre:

data ùüú : Set where
  b1 b2 b3 b4 : ùüú

Mi lesz a destruktora?
V√°lasz:

Mik lesznek ennek a Œ≤-szab√°lyai?
V√°lasz:
----
Mi a ‚ä§ t√≠pus destruktora?
V√°lasz:

Mi lesz a ‚ä§ t√≠pus Œ≤-szab√°lya?
V√°lasz:
----
Mi a ‚ä• destruktora?
V√°lasz:

Mi lesz a ‚ä• t√≠pus Œ≤-szab√°lya?
V√°lasz:
----------------------------------------------------------
Mi t√∂rt√©nik abban az esetben, ha vannak a t√≠pusoknak param√©tereik?

data Alma : Set where
  c1 : Alma
  c2 : Bool ‚Üí Alma

Term√©szetesen semmi k√ºl√∂nleges, pontosan ugyanaz fog a destruktorban szerepelni, mint a konstruktorok tov√°bbra is.

Mi lesz a destruktora?
V√°lasz:

Mik lesznek a Œ≤-szab√°lyai?
V√°lasz:
-----------------------------------------------------------
Mi t√∂rt√©nik, ha van legal√°bb k√©t param√©tere egy konstruktornak?

Pl. rendezett p√°r: _,_ : A ‚Üí B ‚Üí A √ó B

Semmi, a destruktor tov√°bbra is ugyan√∫gy gener√°lhat√≥ (ez term√©szetesen nem azt jelenti, hogy csak az az egy j√≥ van).
Mi lesz a rendezett p√°rok egy destruktora?

Amelyik gener√°lhat√≥ az eddigiek alapj√°n: uncurry : (A ‚Üí B ‚Üí C) ‚Üí A √ó B ‚Üí C

M√°s destruktorok is j√≥k, pl. ezzel az eggyel ekvivalens az al√°bbi kett≈ë egy√ºtt:
- fst : A √ó B ‚Üí A
- snd : A √ó B ‚Üí B

Ezek alapj√°n mik a Œ≤-szab√°lyok?
Az uncurry-vel csak egy szab√°ly sz√ºks√©ges: uncurry f (a , b) ‚â° f a b
Az fst, snd-vel kett≈ë (hiszen k√©t destruktor van egy konstruktorral, 2 ‚àô 1 = 2): fst (a , b) ‚â° a; snd (a , b) ‚â° b
------------------------------------------------------------
data K√∂rte : Set where
  d1 : K√∂rte
  d2 : Bool ‚Üí K√∂rte
  d3 : Bool ‚Üí ùüõ ‚Üí K√∂rte

Mi lesz ezen t√≠pus destruktora?
V√°lasz:

√âs a Œ≤-szab√°lyai?
V√°lasz:
-}

---------------------------------------------------------
-- t√≠pusok Œ∑-szab√°lyai
---------------------------------------------------------
-- Ezt majd a k√∂vetkez≈ë gyakorlat elej√©re rakom be, √≠gy is van itt el√©g tenni val√≥.

---------------------------------------------------------
-- natural numbers, no cheating anymore
---------------------------------------------------------

-- A term√©szetes sz√°mok a diszkr√©t matekr√≥l ismert m√≥don vannak megadva,
-- teh√°t van a 0 √©s van r√°k√∂vetkez≈ëje.
{-
data ‚Ñï : Set where
  zero : ‚Ñï
  suc  : ‚Ñï ‚Üí ‚Ñï
-}

-- Haskellb≈ël ismert Maybe t√≠pus.
{-
data Maybe (A : Set) : Set where
  just : A ‚Üí Maybe A
  nothing : Maybe A
-}

-- FELADAT: Cs√∂kkents eggyel egy megadott term√©szetes sz√°mot, ha lehet.
pred' : ‚Ñï ‚Üí Maybe ‚Ñï
pred' = {!!}

-- FELADAT: Ha lehet, akkor adj hozz√° a sz√°mhoz egyet, egy√©bk√©nt az eredm√©ny legyen 0.
zerosuc : Maybe ‚Ñï ‚Üí ‚Ñï
zerosuc = {!!}

pred‚Üîzerosuc-test1 : pred' (zerosuc nothing) ‚â° nothing
pred‚Üîzerosuc-test1 = refl
pred‚Üîzerosuc-test2 : {n : ‚Ñï} ‚Üí pred' (zerosuc (just n)) ‚â° just n
pred‚Üîzerosuc-test2 = refl

-- Cs√∫nya pred, mert matematikailag nem azt csin√°lja, a 0-nak nincs megel≈ëz≈ëje, az nem lehet 0.
pred'' : ‚Ñï ‚Üí ‚Ñï
pred'' zero = zero
pred'' (suc n) = n

-- Enn√©l sokkal jobb pred-et lehet megadni; Maybe n√©lk√ºl is lehet.
-- Errefel√© halad a t√°rgy; fontos a pontos specifik√°ci√≥!
-- Kell egy f√ºggv√©ny, ami t√≠pust ad vissza.
-- Majd ut√°na rendes pred.

----------------------------------------------------------------------------------------
-- Rekurzi√≥, termination checker
-- Agda CSAK tot√°lis f√ºggv√©nyeket fogad el.

double : ‚Ñï ‚Üí ‚Ñï
double = {!!}

double-test1 : double 2 ‚â° 4
double-test1 = refl
double-test2 : double 0 ‚â° 0
double-test2 = refl
double-test3 : double 10 ‚â° 20
double-test3 = refl

half : ‚Ñï ‚Üí ‚Ñï
half = {!!}

half-test1 : half 10 ‚â° 5
half-test1 = refl
half-test2 : half 11 ‚â° 5
half-test2 = refl
half-test3 : half 12 ‚â° 6
half-test3 = refl

_+_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
_+_ = {!!}
infixl 6 _+_

+-test1 : 3 + 5 ‚â° 8
+-test1 = refl
+-test2 : 0 + 5 ‚â° 5
+-test2 = refl
+-test3 : 5 + 0 ‚â° 5
+-test3 = refl

_*_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
_*_ = {!!}
infixl 7 _*_

*-test1 : 3 * 4 ‚â° 12
*-test1 = refl
*-test2 : 3 * 1 ‚â° 3
*-test2 = refl
*-test3 : 3 * 0 ‚â° 0
*-test3 = refl
*-test4 : 0 * 10 ‚â° 0
*-test4 = refl

_^_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
_^_ = {!!}
infixr 8 _^_

^-test1 : 3 ^ 4 ‚â° 81
^-test1 = refl
^-test2 : 3 ^ 0 ‚â° 1
^-test2 = refl
^-test3 : 0 ^ 3 ‚â° 0
^-test3 = refl
^-test4 : 1 ^ 3 ‚â° 1
^-test4 = refl
^-test5 : 0 ^ 0 ‚â° 1 -- Term√©szetes sz√°mok felett ez m≈±k√∂dik, val√≥s sz√°mokon probl√©m√°s.
^-test5 = refl

_! : ‚Ñï ‚Üí ‚Ñï
_! = {!!}

!-test1 : 3 ! ‚â° 6
!-test1 = refl
!-test2 : 1 ! ‚â° 1
!-test2 = refl
!-test3 : 6 ! ‚â° 720
!-test3 = refl

_-_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
_-_ = {!!}
infixl 6 _-_

-test1 : 3 - 2 ‚â° 1
-test1 = refl
-test2 : 3 - 3 ‚â° 0
-test2 = refl
-test3 : 3 - 4 ‚â° 0 -- cs√∫nya dolog
-test3 = refl
-- Kivon√°sb√≥l is lehet jobb verzi√≥j√∫t √≠rni.

-- FELADAT: Hat√°rozd meg, hogy az els≈ë sz√°m nagyobb vagy egyenl≈ë-e, mint a m√°sodik.
_‚â•_ : ‚Ñï ‚Üí ‚Ñï ‚Üí Bool
_‚â•_ = {!!}

‚â•test1 : 3 ‚â• 2 ‚â° true
‚â•test1 = refl
‚â•test2 : 3 ‚â• 3 ‚â° true
‚â•test2 = refl
‚â•test3 : 3 ‚â• 4 ‚â° false
‚â•test3 = refl

-- ne hasznalj rekurziot, hanem hasznald _‚â•_-t!
-- FELADAT: Rem√©lhet≈ëleg √©rtelemszer≈±.
_>_ : ‚Ñï ‚Üí ‚Ñï ‚Üí Bool
_>_ = {!!}

>test1 : 3 > 2 ‚â° true
>test1 = refl
>test2 : 3 > 3 ‚â° false
>test2 = refl
>test3 : 3 > 4 ‚â° false
>test3 = refl

-- ne hasznalj rekurziot
-- FELADAT: Rem√©lhet≈ëleg √©rtelemszer≈±.
_<_ : ‚Ñï ‚Üí ‚Ñï ‚Üí Bool
_<_ = {!!}

<test1 : 3 < 2 ‚â° false
<test1 = refl
<test2 : 3 < 3 ‚â° false
<test2 = refl
<test3 : 3 < 4 ‚â° true
<test3 = refl

-- FELADAT: K√©t sz√°m k√∂z√ºl add vissza a kisebbet.
min : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
min = {!!}

min-test1 : min 3 2 ‚â° 2
min-test1 = refl
min-test2 : min 2 3 ‚â° 2
min-test2 = refl
min-test3 : min 3 3 ‚â° 3
min-test3 = refl

-- FELADAT: Hasonl√≠ts √∂ssze k√©t sz√°mot! Ha az els≈ë kisebb, mint a m√°sodik, akkor a harmadik param√©tert add vissza; ha egyenl≈ëk, akkor a negyediket; ha nagyobb, akkor az √∂t√∂diket.
comp : {A : Set} ‚Üí ‚Ñï ‚Üí ‚Ñï ‚Üí A ‚Üí A ‚Üí A ‚Üí A
comp m n m<n m=n m>n = {!!}

comp-test1 : comp {‚Ñï} 10 10 0 1 2 ‚â° 1
comp-test1 = refl
comp-test2 : comp {‚Ñï} 10 11 0 1 2 ‚â° 0
comp-test2 = refl
comp-test3 : comp {‚Ñï} 12 11 0 1 2 ‚â° 2
comp-test3 = refl

-- FELADAT: Hat√°rozd meg k√©t sz√°m legnagyobb k√∂z√∂s oszt√≥j√°t.
-- Seg√≠ts√©g: Haszn√°ld a comp-ot!
gcd : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
-- {-# TERMINATING #-} -- Csal√°s! De ezt a f√ºggv√©nyt nem egyszer≈± j√≥l defini√°lni ahhoz, hogy agda l√°ssa, hogy termin√°l.
gcd m n = {!!}

gcd-test1 : gcd 6 9 ‚â° 3
gcd-test1 = refl
gcd-test2 : gcd 100 150 ‚â° 50
gcd-test2 = refl
gcd-test3 : gcd 17 19 ‚â° 1
gcd-test3 = refl
gcd-test4 : gcd 12 24 ‚â° 12
gcd-test4 = refl
gcd-test5 : gcd 19 17 ‚â° 1
gcd-test5 = refl

-- hasznald ugyanazt a definiciot, mint gcd-nel, de most fuel szerinti rekurzio
gcd-helper : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
gcd-helper zero m n = 42
gcd-helper (suc fuel) m n = {!!}
gcd' : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
gcd' m n = gcd-helper (m + n) m n

-- Ezt mi√©rt fogadja el agda?

gcd'-test1 : gcd' 6 9 ‚â° 3
gcd'-test1 = refl
gcd'-test2 : gcd' 100 150 ‚â° 50
gcd'-test2 = refl
gcd'-test3 : gcd' 17 19 ‚â° 1
gcd'-test3 = refl
gcd'-test4 : gcd' 12 24 ‚â° 12
gcd'-test4 = refl
gcd'-test5 : gcd' 19 17 ‚â° 1
gcd'-test5 = refl

-- FELADAT: P√°ros-e egy sz√°m?
even? : ‚Ñï ‚Üí Bool
even? = {!!}

even?-test1 : even? 3 ‚â° false
even?-test1 = refl
even?-test2 : even? 200 ‚â° true
even?-test2 = refl

-- FELADAT: Hat√°rozd meg a Fibonacci-sorozat n. elem√©t; a 0. eleme legyen 1.
fib : ‚Ñï ‚Üí ‚Ñï
fib = {!!}

fib-test1 : fib 6 ‚â° 13
fib-test1 = refl
fib-test2 : fib 3 ‚â° 3
fib-test2 = refl

-- FELADAT: Vizsg√°ld meg, hogy k√©t sz√°m egyenl≈ë-e! Ne haszn√°lj rekurzi√≥t!
eq? : ‚Ñï ‚Üí ‚Ñï ‚Üí Bool
eq? = {!!}

eq?-test1 : eq? 4 3 ‚â° false
eq?-test1 = refl
eq?-test2 : eq? 4 4 ‚â° true
eq?-test2 = refl

-- rem m n = a maradek, ha elosztjuk m-et (suc n)-el
-- FELADAT: K√©t sz√°mot osszunk el, az eredm√©ny legyen az eg√©sz oszt√°s marad√©ka.
rem : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
rem a b = {!!}
rem-test1 : rem 5 1 ‚â° 1
rem-test1 = refl
rem-test2 : rem 11 2 ‚â° 2
rem-test2 = refl

-- div m n = m-ben hanyszor van meg (suc n)
-- FELADAT: K√©t sz√°mot eg√©sz osszunk!
div : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
div a b = {!!}
div-test1 : div 5 1 ‚â° 2
div-test1 = refl
div-test2 : div 11 2 ‚â° 3
div-test2 = refl

-- Mi√©rt ite-vel kezd≈ëdik a neve?
iteNat : {A : Set} ‚Üí A ‚Üí (A ‚Üí A) ‚Üí ‚Ñï ‚Üí A
iteNat z s zero = z
iteNat z s (suc n) = s (iteNat z s n)

recNat : {A : Set} ‚Üí A ‚Üí (‚Ñï ‚Üí A ‚Üí A) ‚Üí ‚Ñï ‚Üí A
recNat z s zero = z
recNat z s (suc n) = s n (recNat z s n)

-- FEL: add meg iteNat-ot mintaillesztes nelkul, recNat segitsegevel
iteNat' : {A : Set} ‚Üí A ‚Üí (A ‚Üí A) ‚Üí ‚Ñï ‚Üí A
iteNat' = {!!}

iteNat'-test1 : {A : Set}{z : A}{s : A ‚Üí A} ‚Üí iteNat' z s zero ‚â° z
iteNat'-test1 = refl
iteNat'-test2 : {A : Set}{z : A}{s : A ‚Üí A}{n : ‚Ñï} ‚Üí iteNat' z s (suc n) ‚â° s (iteNat' z s n)
iteNat'-test2 = refl

-- FEL: add meg recNat-ot mintaillesztes nelkul, iteNat segitsegevel (lasd eloadas)
recNat' : {A : Set} ‚Üí A ‚Üí (‚Ñï ‚Üí A ‚Üí A) ‚Üí ‚Ñï ‚Üí A
recNat' = {!!}

recNat'-test1 : {A : Set}{z : A}{s : ‚Ñï ‚Üí A ‚Üí A} ‚Üí recNat' z s zero ‚â° z
recNat'-test1 = refl
recNat'-test2 : {A : Set}{z : A}{s : ‚Ñï ‚Üí A ‚Üí A} ‚Üí recNat' z s 3 ‚â° s 2 (s 1 (s 0 z))
recNat'-test2 = refl

-- FEL: add meg ujra az osszes fent fuggvenyt mintaillesztes nelkul, iteNat es/vagy recNat hasznalataval!

---------------------------------------------------------
-- lists
---------------------------------------------------------

{-
data List (A : Set) : Set where
  [] : List A
  _‚à∑_ : A ‚Üí List A ‚Üí List A
infixr 5 _‚à∑_
-}

-- FELADAT: Hat√°rozzuk meg egy lista elemsz√°m√°t!
length : {A : Set} ‚Üí List A ‚Üí ‚Ñï
length = {!!}

length-test1 : length {‚Ñï} (1 ‚à∑ 2 ‚à∑ 3 ‚à∑ []) ‚â° 3
length-test1 = refl
length-test2 : length {‚Ñï} (1 ‚à∑ []) ‚â° 1
length-test2 = refl

-- FELADAT: Adjuk √∂ssze egy lista sz√°mait.
sumList : List ‚Ñï ‚Üí ‚Ñï
sumList = {!!}

sumList-test : sumList (1 ‚à∑ 2 ‚à∑ 3 ‚à∑ []) ‚â° 6
sumList-test = refl

-- FELADAT: F≈±zz√ºnk √∂ssze k√©t list√°t!
_++_ : {A : Set} ‚Üí List A ‚Üí List A ‚Üí List A
_++_ = {!!}
infixr 5 _++_

++-test : the ‚Ñï 3 ‚à∑ 2 ‚à∑ [] ++ 1 ‚à∑ 4 ‚à∑ [] ‚â° 3 ‚à∑ 2 ‚à∑ 1 ‚à∑ 4 ‚à∑ []
++-test = refl

-- FELADAT: Alkalmazzunk egy f√ºggv√©nyt egy lista minden elem√©n!
map : {A B : Set} ‚Üí (A ‚Üí B) ‚Üí List A ‚Üí List B
map = {!!}

map-test : map (_+ 2) (3 ‚à∑ 9 ‚à∑ []) ‚â° (5 ‚à∑ 11 ‚à∑ [])
map-test = refl

-- FELADAT: Defini√°ld a lista destruktor√°t! Dolgozzunk fel egy list√°t:
-- ha √ºres a lista, akkor csak adjunk vissza egy alap√©rt√©ket
-- ha a list√°ban van elem, akkor alkalmazzunk r√° egy f√ºggv√©nyt az alap√©rt√©kkel √∫gy, hogy az kifejez√©s jobbra legyen z√°r√≥jelezve.
-- Haskell-ben foldr
iteList : {A B : Set} ‚Üí B ‚Üí (A ‚Üí B ‚Üí B) ‚Üí List A ‚Üí B
iteList n c as = {!!}

iteList-test : iteList {‚Ñï} [] _‚à∑_ (1 ‚à∑ 2 ‚à∑ 3 ‚à∑ []) ‚â° 1 ‚à∑ 2 ‚à∑ 3 ‚à∑ []
iteList-test = refl

-- FEL: add meg a fenti fuggvenyeket (length, ..., map) iteList segitsegevel!

---------------------------------------------------------
-- trees
---------------------------------------------------------

-- a datatype of expressions

data Expr : Set where
  value : ‚Ñï ‚Üí Expr
  _[+]_ : Expr ‚Üí Expr ‚Üí Expr
  _[*]_ : Expr ‚Üí Expr ‚Üí Expr

-- 2 * (3 + 4) reprezentacioja:
e : Expr
e = value 2 [*] (value 3 [+] value 4)
{-
  *
 / \
2   +
   / \
  3   4
-}

-- FELADAT: √ârt√©kelj√ºnk ki egy kifejez√©st!
eval : Expr ‚Üí ‚Ñï
eval = {!!}

eval-test : eval e ‚â° 14
eval-test = refl

-- FELADAT: Hat√°rozzuk meg egy kifejez√©sfa (szintaxisfa, AST) magass√°g√°t. Lev√©l magass√°ga 0.
height : Expr ‚Üí ‚Ñï
height = {!!}

height-test : height e ‚â° 2
height-test = refl


-- http://www.cs.nott.ac.uk/~psztxa/mgs.2021/datatypes.pdf -ben a 3. feladat (74. oldal):

data Tree (A : Set) : Set where
  leaf : Tree A
  node : Tree A ‚Üí A ‚Üí Tree A ‚Üí Tree A

t : Tree ‚Ñï
t = node (node leaf 1 (node leaf 2 leaf)) 5 leaf
{-
    5
   / \
  1
 / \
    2
   / \
-}

-- FELADAT: Csin√°ljuk meg egy fa inorder bej√°r√°s√°t!
tree2List : {A : Set} ‚Üí Tree A ‚Üí List A
tree2List = {!!}

tree2List-test : tree2List t ‚â° 1 ‚à∑ 2 ‚à∑ 5 ‚à∑ []
tree2List-test = refl

-- egy fa rendezett, ha minden csomopontnal levo erteknel a bal reszfaban kisebb, a kobb reszfaban pedig nagyobb ertekek vannak. peldaul t rendezett
-- seg√≠ts√©g: haszn√°ljuk a _‚â§_ f√ºggv√©nyt.
-- ez a fuggveny egy rendezett faba illeszt be egy uj erteket ugy,
-- hogy a fa rendezett maradjon
insert : ‚Ñï ‚Üí Tree ‚Ñï ‚Üí Tree ‚Ñï
insert = {!!}

t' : Tree ‚Ñï
t' = node (node (node leaf 0 leaf) 1 (node leaf 2 leaf)) 5 leaf
{-
      5
     / \
    1
   / \
  0   2
 / \ / \
-}

insert-test : insert 0 t ‚â° t'
insert-test = refl

-- FELADAT: egy list√°t egy rendezett fara alak√≠t.
list2tree : List ‚Ñï ‚Üí Tree ‚Ñï
list2tree = {!!}

-- FELADAT: Rendezz√ºnk egy list√°t √∫gy, hogy azt f√°v√° alak√≠tjuk megfelel≈ëen, majd inorder bej√°rjuk!
tree-sort : List ‚Ñï ‚Üí List ‚Ñï
tree-sort = {!!}

tree-sort-test1 : tree-sort (10 ‚à∑ 2 ‚à∑ 1 ‚à∑ 5 ‚à∑ []) ‚â° 1 ‚à∑ 2 ‚à∑ 5 ‚à∑ 10 ‚à∑ []
tree-sort-test1 = refl

tree-sort-test2 : tree-sort (1 ‚à∑ 2 ‚à∑ 1 ‚à∑ 5 ‚à∑ []) ‚â° 1 ‚à∑ 1 ‚à∑ 2 ‚à∑ 5 ‚à∑ []
tree-sort-test2 = refl

-- nested types

data RoseTree : Set where
  node : List RoseTree ‚Üí RoseTree

tR : RoseTree
tR = node (node (node [] ‚à∑ []) ‚à∑ node [] ‚à∑ node (node [] ‚à∑ node [] ‚à∑ []) ‚à∑ [])
{-
  /|\
 |  /\
-}

-- FELADAT: Sz√°moljuk meg egy r√≥zsafa csom√≥pontjait.
countNodes     : RoseTree ‚Üí ‚Ñï
countNodesList : List RoseTree ‚Üí ‚Ñï
countNodes = {!!}
countNodesList = {!!}

countNodes-test : countNodes tR ‚â° 7
countNodes-test = refl

-- maximum of two numbers
max : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
max = {!!}

max-test1 : max 3 2 ‚â° 3
max-test1 = refl
max-test2 : max 20 30 ‚â° 30
max-test2 = refl
max-test3 : max 20 20 ‚â° 20
max-test3 = refl

-- FELADAT: Hat√°rozzuk meg egy r√≥zsafa magass√°g√°t.
heightRoseTree : RoseTree ‚Üí ‚Ñï
heightRoseTreeList : List RoseTree ‚Üí ‚Ñï
heightRoseTree = {!!}
heightRoseTreeList = {!!}

heightRoseTree-test1 : heightRoseTree tR ‚â° 2
heightRoseTree-test1 = refl
heightRoseTree-test2 : heightRoseTree (node (node (node (node [] ‚à∑ []) ‚à∑ []) ‚à∑ [])) ‚â° 3
heightRoseTree-test2 = refl

-- vegtelenul elagazodo fak (infinitely branching trees)

data TreeInf : Set where
  leaf : TreeInf
  node : (‚Ñï ‚Üí TreeInf) ‚Üí TreeInf

-- a balanced tree which has height two (draw it!)
t2 : TreeInf
t2 = node (Œª _ ‚Üí node (Œª _ ‚Üí leaf))

-- tI n should be a complete tree of height n (all branches should have height n-1, and so on)
tI : ‚Ñï ‚Üí TreeInf
tI = {!!}

tI-test1 : tI 3 ‚â° node Œª _ ‚Üí node Œª _ ‚Üí node Œª _ ‚Üí leaf
tI-test1 = refl
tI-test2 : tI 5 ‚â° node Œª _ ‚Üí node Œª _ ‚Üí node Œª _ ‚Üí node Œª _ ‚Üí node Œª _ ‚Üí leaf
tI-test2 = refl

-- a tree where the height of the n^th branch is n (all branches have finite length, but there is no upper bound)
tI' : TreeInf
tI' = {!!}

_!_ : TreeInf ‚Üí ‚Ñï ‚Üí TreeInf
leaf ! n = leaf
node ts ! n = ts n
test-tI'1 : tI' ! 0 ‚â° leaf
test-tI'1 = refl
test-tI'2 : tI' ! 1 ‚â° node Œª _ ‚Üí leaf
test-tI'2 = refl
test-tI'3 : tI' ! 3 ‚â° node Œª _ ‚Üí node Œª _ ‚Üí node Œª _ ‚Üí leaf
test-tI'3 = refl
test-tI'4 : tI' ! 5 ‚â° node Œª _ ‚Üí node Œª _ ‚Üí node Œª _ ‚Üí node Œª _ ‚Üí node Œª _ ‚Üí leaf
test-tI'4 = refl
